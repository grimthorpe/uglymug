Porting UglyMUG
===============

There are four steps to porting UglyMUG to a new platform:

1. Persuade the Makefile to detect your new platform;

2. Create the appropriate directory structure and modify OS-dependent files;

3. Port and test the code;

4. Contribute the code back to us (please!).


Platform detection
------------------

This is handled in Makefile.os.  The essence of the detection is in the first
few lines, headed 'Which OS?', and culminates with the creation of a suffix
in $(SUFFIX).  A simple approach here is to add the following to Makefile.os:

	all:
		echo $(SUFFIX)

and then to run:

	make -f Makefile.os

to determine the value of SUFFIX.

If you are on a platform that is apparently supported (Solaris, Linux, FreeBSD,
MinGW32) but it is not detected as such, chances are that your SUFFIX is subtly
different to the ones listed in the 'OS-specific strings' section of
Makefile.os.  If this is the case, simply copy one of the BUILD_ENVIRONMENT.*
lines for the appropriate platform and add another suffix string.  Please also
mail uglymug@uglymug.org.uk with your new porting line, as we can then add it
to our distribution so that you don't have to do this next time!

If you are on a platform that has no current support, you may have to:

- Extend the way of determining SUFFIX, so that your platform is detected.
  We can't help you here; you're on your own.

- Add a new section to the OS-specific strings, following the existing
  structure.  If you do this, you will have to select a new platform name.
  We suggest the name of the operating system in lowercase without punctuation.
  If the port was to a new OS called 'Ugly OS!' and you had found out a couple
  of suffix strings for your platform, your section might look like:

	# Ugly OS (contributed by Ozzard)
	BUILD_ENVIRONMENT.Ugly-OS-ARM7:=uglyos
	BUILD_ENVIRONMENT.Ugly-OS-PPC:=uglyos

To confirm the detection, remove any debugging lines in Makefile.os and run:

	make checkenvironment

If your platform is correctly detected, move on to the next stage.


Directory Structure and file modification
-----------------------------------------

Each platform requires a directory under configs, named according to the
detected platform name.  So in our example, we would require configs/uglyos.

Two files are required in this directory: Makefile and Makefile.os.  Makefile
holds instructions for making any targets that are specific to this port;
Makefile.os contains definitions for the build process itself.  The easiest
way to create these files is:

- Copy Makefile.os from another port and modify its contents;

- Create a blank Makefile.

Finally, you should examine os.h.  This file contains conditional definitions
for each platform; platforms are detected based on matching the definitions
defined by the C++ compiler (usually G++).  Create your own section that
matches your choice of platform.  At this stage, the easiest approach is
probably to copy the definitions from a platform that might match yours, then
modify them at the next stage.

To test this step, run 'make -n'.  You'll probably get some errors concerning
missing include files, but that should be about it.  If you get any other
make errors, we'd suggest fixing them before moving on.


Porting the code
----------------

There's not a lot to say about the porting process other than 'caffiene is
good'.  However, there are a few guidelines to making a port that we can
integrate easily:

- The only place for compiler-defined preprocessor constants is os.h.  If you
  want to compile some code conditionally, create a preprocessor constant in
  os.h and use that in the rest of your code.  Look for uses of USE_WINSOCK2
  in the code for an example of this.

- Do your best to ensure that existing code stays intact.  It's very tempting
  to delete code that isn't relevant when porting; please don't.

When it all runs according to the manual, congratulations - you have a
successful port!


Contributing the code
---------------------

We'd very much like to merge your port back into our main source tree, and to
give you credit for the port.  Please contact uglymug@uglymug.org.uk and we'll
arrange this.

Peter Crowther, for the UglyCODE developers, 21/4/2003.
